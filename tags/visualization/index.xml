<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>visualization on R to the max</title>
    <link>https://kwhkim.github.io/maxR/tags/visualization/</link>
    <description>Recent content in visualization on R to the max</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 15 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kwhkim.github.io/maxR/tags/visualization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>measurement units</title>
      <link>https://kwhkim.github.io/maxR/2022/03/15/measurement-units/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kwhkim.github.io/maxR/2022/03/15/measurement-units/</guid>
      <description>
&lt;script src=&#34;https://kwhkim.github.io/maxR/2022/03/15/measurement-units/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Data &lt;code&gt;mtcars&lt;/code&gt; has a column named &lt;code&gt;mpg&lt;/code&gt;. &lt;code&gt;mpg&lt;/code&gt; means &lt;strong&gt;m&lt;/strong&gt;iles &lt;strong&gt;p&lt;/strong&gt;er &lt;strong&gt;g&lt;/strong&gt;allon. ‘Mile’ and ‘gallon’ are units for length and volume. A mile is approximately 1.6 kilometers and a gallon is approximately 3.7 liters. Mile and gallon sound unfamiliar to people who live outside England or U.S.A. because international standard units for length and volume are meter and liter.&lt;/p&gt;
&lt;p&gt;In this post, we will learn how to convert a unit to another unit, for instance, we will convert mpg to km/L, which is more comprehensible to people who use SI units.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;units-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Units in R&lt;/h2&gt;
&lt;p&gt;Vectors(the most common data structure in R) do not contain information of measurement units. Units are implicit and units should be converted by users. But as history tells us, unit conversion should be treated carefully because it can cause serious damage to the whole project&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;package-units&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Package &lt;code&gt;units&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Using the package &lt;code&gt;units&lt;/code&gt;, we can easily convert units accurately. And the data is plotted, units will be included in the x- or y-label automatically.&lt;/p&gt;
&lt;p&gt;First install package &lt;code&gt;units&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;#39;units&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And load all the necessary packages and data&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(units)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## udunits database from C:/Users/Seul/Documents/R/win-library/4.1/units/share/udunits/udunits2.xml&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr, warn.conflicts = FALSE)
data(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get the information about the data &lt;code&gt;mtcars&lt;/code&gt;, we can do &lt;code&gt;help(mtcars)&lt;/code&gt;. It will show the measurement unit for each column. &lt;code&gt;mpg&lt;/code&gt; is measured in unit of &lt;strong&gt;m&lt;/strong&gt;iles &lt;strong&gt;p&lt;/strong&gt;er &lt;strong&gt;g&lt;/strong&gt;allon, &lt;code&gt;disp&lt;/code&gt; is measured in unit of cubic inch, &lt;code&gt;hp&lt;/code&gt; is measured in unit of gross &lt;strong&gt;h&lt;/strong&gt;orse&lt;strong&gt;p&lt;/strong&gt;ower, &lt;code&gt;wt&lt;/code&gt; is measured in unit of 1000 lbs, and &lt;code&gt;qsec&lt;/code&gt; is measured in unit of sec per 1/4 mile.&lt;/p&gt;
&lt;p&gt;It is sad that mpg(&lt;strong&gt;m&lt;/strong&gt;iles &lt;strong&gt;p&lt;/strong&gt;er &lt;strong&gt;g&lt;/strong&gt;allon) is not registered in the package &lt;code&gt;units&lt;/code&gt;, but we can register it ourselves. The code below installs a new unit called &lt;code&gt;mpg_US&lt;/code&gt; as &lt;code&gt;interantional_mile/US_liquid_gallon&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install_unit(name=&amp;#39;mpg_US&amp;#39;, def=&amp;#39;international_mile/US_liquid_gallon&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can use &lt;code&gt;mpg_US&lt;/code&gt;. &lt;code&gt;mtcars$mpg&lt;/code&gt; is measured in unit of mpg(US) and &lt;code&gt;mtcars$wt&lt;/code&gt; is measured in unit of kilogram.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;units(mtcars$mpg) = &amp;#39;mpg_US&amp;#39;
units(mtcars$wt) = &amp;#39;kg&amp;#39;
mtcars$mpg %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Units: [mpg_US]
## [1] 21.0 21.0 22.8 21.4 18.7 18.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we want to convert the unit mpg(US) to SI unit km/L, we need to do the below.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;units(mtcars$mpg) = &amp;#39;km/L&amp;#39;
mtcars$mpg %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Units: [km/L]
## [1] 8.928017 8.928017 9.693276 9.098075 7.950187 7.695101&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can easily plot the relation between &lt;code&gt;mpg&lt;/code&gt; and &lt;code&gt;wt&lt;/code&gt; using the package &lt;code&gt;ggplot2&lt;/code&gt;. But do not forget to load &lt;code&gt;ggforce&lt;/code&gt; beforehand.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(ggforce) # without this, the code below will raise error!&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Registered S3 method overwritten by &amp;#39;ggforce&amp;#39;:
##   method           from 
##   scale_type.units units&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data=mtcars,
       aes(x=mpg, y=wt)) + 
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://kwhkim.github.io/maxR/2022/03/15/measurement-units/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;units::units()&amp;lt;-&lt;/code&gt; for setting unit for measurements.
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;units::units()&amp;lt;-&lt;/code&gt; for converting unit.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;units::units()&amp;lt;-NULL&lt;/code&gt; for deleting unit.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;install_unit(name=, def=)&lt;/code&gt; for introducing new units.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;valid_udunits()&lt;/code&gt; to show all the units available from the package &lt;code&gt;units&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;valid_udunits() %&amp;gt;% head &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## udunits database from C:/Users/Seul/Documents/R/win-library/4.1/units/share/udunits/udunits2.xml&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 11
##   symbol symbol_aliases name_singular name_singular_aliases name_plural
##   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;      
## 1 m      &amp;quot;&amp;quot;             meter         &amp;quot;metre&amp;quot;               &amp;quot;&amp;quot;         
## 2 kg     &amp;quot;&amp;quot;             kilogram      &amp;quot;&amp;quot;                    &amp;quot;&amp;quot;         
## 3 s      &amp;quot;&amp;quot;             second        &amp;quot;&amp;quot;                    &amp;quot;&amp;quot;         
## 4 A      &amp;quot;&amp;quot;             ampere        &amp;quot;&amp;quot;                    &amp;quot;&amp;quot;         
## 5 K      &amp;quot;&amp;quot;             kelvin        &amp;quot;&amp;quot;                    &amp;quot;&amp;quot;         
## 6 mol    &amp;quot;&amp;quot;             mole          &amp;quot;&amp;quot;                    &amp;quot;&amp;quot;         
## # ... with 6 more variables: name_plural_aliases &amp;lt;chr&amp;gt;, def &amp;lt;chr&amp;gt;,
## #   definition &amp;lt;chr&amp;gt;, comment &amp;lt;chr&amp;gt;, dimensionless &amp;lt;lgl&amp;gt;, source_xml &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/International_System_of_Units&#34;&gt;International System of Units&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;It is well known that the failure of MCO(&lt;strong&gt;M&lt;/strong&gt;ars &lt;strong&gt;C&lt;/strong&gt;limate &lt;strong&gt;O&lt;/strong&gt;rbiter) is due to inadequate unit coversion.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;If the objective is simply to reset the unit, do &lt;code&gt;units(mtcars$mpg)=NULL; units(mtcars$mpg)=&#39;km/L&#39;&lt;/code&gt;. This will not convert unit but just replace the unit with another unit.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
            <tag>visualization</tag>
      
            <tag>preprocessing</tag>
      
      
            <category>R</category>
      
    </item>
    
    <item>
      <title>Better Visualization of y|x for Big Data</title>
      <link>https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/</guid>
      <description>
&lt;script src=&#34;https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;plotting-big-data-and-alpha&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plotting Big Data and Alpha&lt;/h2&gt;
&lt;p&gt;When plotting too many data points, we use &lt;code&gt;alpha=&lt;/code&gt; because points are overlapped and indistinguishable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(data.table)
library(cowplot)
library(ggplot2)

#N &amp;lt;- 1000
N &amp;lt;- 1000000

x &amp;lt;- rnorm(N)
y &amp;lt;- x + rnorm(N)


dat &amp;lt;- data.table(x = x, 
                  y = y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat %&amp;gt;% ggplot(aes(x=x, y=y)) + 
  geom_point() + 
  labs(title=&amp;#39;Original plot&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;70%&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat %&amp;gt;% ggplot(aes(x=x, y=y)) + geom_point(alpha=0.01) + 
  labs(title=&amp;#39;Using alpha=0.01&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;70%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Meaningful minimal &lt;code&gt;alpha&lt;/code&gt; seems to be &lt;code&gt;0.01&lt;/code&gt; for &lt;code&gt;ggplot2&lt;/code&gt;. For very big data, &lt;code&gt;alpha=0.01&lt;/code&gt; is not small enough. Looking at the plot the above, we see big blackness in the center. This might be that the densities in the center are the same or it might be that they reached to the ceiling of blackness even if the densities are not equal.&lt;/p&gt;
&lt;p&gt;Bivariate normal distribution is too simple. Let’s try more complex data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x1 &amp;lt;- rnorm(N/2)
y1 &amp;lt;- 2*sin(x1) + rnorm(N/2)
x2 &amp;lt;- rnorm(N/2)
y2 &amp;lt;- 2*cos(x2) + rt(N/2, df=30)

dat &amp;lt;- data.table(x=c(x1,x2),
                  y=c(y1,y2))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;using-multiple-alphas&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using multiple &lt;code&gt;alpha&lt;/code&gt;s&lt;/h3&gt;
&lt;p&gt;We can use multiple &lt;code&gt;alpha&lt;/code&gt;s to avoid the problem of ceiling effect of constant &lt;code&gt;alpha&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- dat %&amp;gt;% ggplot(aes(x=x, y=y)) + geom_point() + 
  labs(title=&amp;#39;alpha=1&amp;#39;) + theme_minimal()
p2 &amp;lt;- dat %&amp;gt;% ggplot(aes(x=x, y=y)) + geom_point(alpha=0.1) + 
  labs(title=&amp;#39;alpha=0.1&amp;#39;) + theme_minimal()
p3 &amp;lt;- dat %&amp;gt;% ggplot(aes(x=x, y=y)) + geom_point(alpha=0.05) +
  labs(title=&amp;#39;alpha=0.05&amp;#39;) + theme_minimal()
p4 &amp;lt;- dat %&amp;gt;% ggplot(aes(x=x, y=y)) + geom_point(alpha=0.01) +
  labs(title=&amp;#39;alpha=0.01&amp;#39;) + theme_minimal()

plot_grid(p1,p2,p3,p4,ncol=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;70%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;But using the minimal &lt;code&gt;alpha=0.01&lt;/code&gt; does not reveal the density differences in the center. We can try sampling in this case.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sampling&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sampling&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- dat %&amp;gt;% sample_n(N/5) %&amp;gt;% 
  ggplot(aes(x=x, y=y)) + geom_point(alpha=0.01) + 
  labs(title=&amp;#39;alpha=0.01 with 20% of data&amp;#39;) + theme_minimal()
p2 &amp;lt;- dat %&amp;gt;% sample_n(N/10) %&amp;gt;% 
  ggplot(aes(x=x, y=y)) + geom_point(alpha=0.01) + 
  labs(title=&amp;#39;alpha=0.01 with 10% of data&amp;#39;) + theme_minimal()
p3 &amp;lt;- dat %&amp;gt;% sample_n(N/50) %&amp;gt;% 
  ggplot(aes(x=x, y=y)) + geom_point(alpha=0.01) +
  labs(title=&amp;#39;alpha=0.01 with 2% of data&amp;#39;) + theme_minimal()
p4 &amp;lt;- dat %&amp;gt;% sample_n(N/100) %&amp;gt;% 
  ggplot(aes(x=x, y=y)) + geom_point(alpha=0.01) +
  labs(title=&amp;#39;alpha=0.01 with 1% of data&amp;#39;) + theme_minimal()
library(cowplot)
plot_grid(p1,p2,p3,p4,ncol=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;70%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;But sampling utilizes only some part of the data. It depends on the chance so the results are different every time we plot.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;contidional-density-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Contidional density plot&lt;/h2&gt;
&lt;p&gt;There are several reason for plotting. One reason is doing EDA(&lt;strong&gt;E&lt;/strong&gt;xploratory &lt;strong&gt;D&lt;/strong&gt;ata &lt;strong&gt;A&lt;/strong&gt;nalysis) before doing regression analysis such as linear model, ML, and DL.&lt;/p&gt;
&lt;p&gt;The important thing in this case is to see what conditional density &lt;span class=&#34;math inline&#34;&gt;\(\mathbb{p}(y|x)\)&lt;/span&gt; is like. Besides all plots above are focused on bivariate density.&lt;/p&gt;
&lt;p&gt;To visualize the expectation of &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; conditional on &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; , non-parametric regression line in the following would help.&lt;/p&gt;
&lt;div id=&#34;regression-line&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Regression line&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- dat %&amp;gt;% sample_n(N/100) %&amp;gt;% 
  ggplot(aes(x=x, y=y)) + geom_point(alpha=0.01) +
  geom_smooth(method=&amp;#39;loess&amp;#39;) + 
  labs(title=&amp;#39;alpha=0.01 with 1% of data, loess&amp;#39;) + theme_minimal() 
p2 &amp;lt;- dat %&amp;gt;% sample_n(N/100) %&amp;gt;% 
  ggplot(aes(x=x, y=y)) + geom_point(alpha=0.01) +
  geom_smooth(method=&amp;#39;auto&amp;#39;) + 
  labs(title=&amp;#39;alpha=0.01 with 1% of data, gam&amp;#39;) + theme_minimal() 
print(p1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(p2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;gam&amp;#39; and formula &amp;#39;y ~ s(x, bs = &amp;quot;cs&amp;quot;)&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;70%&#34; /&gt;&lt;img src=&#34;https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/index_files/figure-html/unnamed-chunk-7-2.png&#34; width=&#34;70%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can definitely see conditional expectation( &lt;span class=&#34;math inline&#34;&gt;\(\mathbb{E}[y|x] = \int y\  \mathbb{p}(y|x) dy\)&lt;/span&gt; ), but we cannot figure out what the conditional density would be like.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conditional-density&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conditional density&lt;/h3&gt;
&lt;div id=&#34;binning-x&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;binning &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;As we saw above, using small constant &lt;code&gt;alpha&lt;/code&gt; prevents us from identifying the density difference when the points are too gathered and identifying data points where data points are so scarce. One possible solution would be binning &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; and sampling.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat %&amp;gt;% 
  mutate(xCut = cut(x, breaks=10)) %&amp;gt;%
  group_by(xCut) %&amp;gt;%
  do(sample_n(., 10000, replace=TRUE)) %&amp;gt;%
  ggplot(aes(x=x, y=y)) + 
  geom_point(alpha=0.01)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;70%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Better visualizing of conditional density but we can see artifacts. It must be because of too big bin size. Let’s try smaller bin size.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat %&amp;gt;% 
  mutate(xCut = cut(x, breaks=50)) %&amp;gt;%
  group_by(xCut) %&amp;gt;%
  do(sample_n(., 2000, replace=TRUE)) %&amp;gt;%
  ggplot(aes(x=x, y=y)) + 
  geom_point(alpha=0.01)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;70%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;estimating-density-of-x&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Estimating density of &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;We can never say what is the best bin size. We would better estimate the probability density function of &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We also treated every &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; as identical. We might take estimated probability function of &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; into consideration, either using probability function itself or some function(ex. &lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; ) of it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xDensity &amp;lt;- ks::kde(dat$x)
dat$prob &amp;lt;- predict(xDensity, x = dat$x)

#head(dat)
dat %&amp;gt;% 
  mutate(xCut = cut(x, breaks=50)) %&amp;gt;%
  group_by(xCut) %&amp;gt;%
  do(sample_n(., 2000, replace=TRUE, weight=1/prob)) %&amp;gt;%
  
  ggplot(aes(x=x, y=y)) + 
  geom_point(alpha=0.01) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://kwhkim.github.io/maxR/2022/03/06/better-visualization-of-y-x-for-big-data/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;70%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
      
            <tag>big data</tag>
      
            <tag>visualization</tag>
      
      
            <category>R</category>
      
    </item>
    
  </channel>
</rss>